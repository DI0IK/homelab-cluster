---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: znc-pvc
  annotations:
    nfs.io/storage-path: data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs-client
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: questing-webserver-py-config  # New ConfigMap for the Python app
  labels:
    app: questing-webserver
  namespace: znc
data:
  app.py: |
    from flask import Flask, send_from_directory, abort, make_response
    from flask_cors import CORS
    import os

    app = Flask(__name__)
    # Replicates 'add_header Access-Control-Allow-Origin *'
    CORS(app) 

    # Directory where the znc-data volume is mounted
    BASE_DIR = '/znc-data/modules'
    PROPOOL_DIR = os.path.join(BASE_DIR, 'propool')
    QUEST_TRACKER_DIR = os.path.join(BASE_DIR, 'quest_tracker')

    # Replicates 'location /quest_stats.json'
    @app.route('/quest_stats.json')
    def serve_quest_stats_json():
        try:
            return send_from_directory(PROPOOL_DIR, 'quest_stats.json')
        except FileNotFoundError:
            abort(404)

    # Replicates 'location /quest_stats/' with 'autoindex on'
    @app.route('/quest_stats/')
    @app.route('/quest_stats/<path:filename>')
    def serve_quest_tracker(filename=''):
        full_path = os.path.join(QUEST_TRACKER_DIR, filename)

        if os.path.isdir(full_path):
            try:
                # Basic autoindex replication
                files = os.listdir(full_path)
                html = f'<h1>Index of /quest_stats/{filename}</h1><hr><ul>'
                if filename:
                    html += '<li><a href="../">../</a></li>'
                for f in sorted(files):
                    # Add trailing slash for directories
                    if os.path.isdir(os.path.join(full_path, f)):
                        f += '/'
                    html += f'<li><a href="{f}">{f}</a></li>'
                html += '</ul><hr>'
                return html
            except FileNotFoundError:
                abort(404)
        
        # Serve the file if it's not a directory
        try:
            return send_from_directory(QUEST_TRACKER_DIR, filename)
        except FileNotFoundError:
            abort(404)

    # Replicates 'location / { deny all; }'
    @app.route('/')
    def deny_root():
        return "Forbidden", 403

    if __name__ == '__main__':
        # Listen on port 8080 to match the Service
        app.run(host='0.0.0.0', port=8080)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: znc
  labels:
    app: znc
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: znc
  template:
    metadata:
      labels:
        app: znc
    spec:
      securityContext:
        fsGroup: 101
      containers:
        - name: znc
          image: znc:1.10.1
          ports:
            - name: znc-port
              containerPort: 6697
          volumeMounts:
            - name: znc-data
              mountPath: /znc-data
        - name: python-webserver
          image: python:3.14-slim
          ports:
            - name: http-web
              containerPort: 8080  # Same port as NGINX
          command: ["/bin/sh", "-c"]
          args:
            - |
              pip install Flask flask-cors
              python /app/app.py
          volumeMounts:
            - name: znc-data
              mountPath: /znc-data
              readOnly: true
            - name: python-config
              mountPath: /app
      
      volumes:
        - name: znc-data
          persistentVolumeClaim:
            claimName: znc-pvc
        - name: python-config
          configMap:
            name: questing-webserver-py-config
            items:
              - key: app.py
                path: app.py
---
apiVersion: v1
kind: Service
metadata:
  name: znc-service
  labels:
    app: znc
spec:
  selector:
    app: znc
  ports:
    - name: znc-port
      protocol: TCP
      port: 6697
      targetPort: znc-port
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: znc-ingress
  namespace: znc
  labels:
    app.kubernetes.io/name: znc
  annotations:
    gethomepage.dev/href: "https://znc.dominikstahl.dev"
    gethomepage.dev/enabled: "true"
    gethomepage.dev/description: "ZNC bouncer"
    gethomepage.dev/group: System
    gethomepage.dev/icon: znc
    gethomepage.dev/app: znc
    gethomepage.dev/name: ZNC
    gethomepage.dev/pod-selector: "app.kubernetes.io/name=znc"
    gethomepage.dev/allowGroups: ZNC
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`znc.dominikstahl.dev`)
      kind: Rule
      services:
        - name: znc-service
          kind: Service
          port: 6697
---
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: znc
  namespace: znc
spec:
  entryPoints:
    - irc
  routes:
    - match: HostSNI(`znc.dominikstahl.dev`)
      services:
        - name: znc-service
          port: 6697
  tls: {}
---
apiVersion: v1
kind: Service
metadata:
  name: questing-webserver-service
  labels:
    app: znc
spec:
  selector:
    app: znc
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: questing-webserver-ingress
  namespace: znc
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`questing-data.dominikstahl.dev`)
      kind: Rule
      services:
        - name: questing-webserver-service
          kind: Service
          port: 8080