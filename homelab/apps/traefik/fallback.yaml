---
apiVersion: v1
kind: Service
metadata:
  name: fallback-upstream
  namespace: traefik
spec:
  # Use ExternalName to route to the external hostname so DNS is respected
  type: ExternalName
  externalName: ha.dominikstahl.dev
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
---
# Retry middleware to mitigate transient upstream failures
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: fallback-retry
  namespace: traefik
spec:
  retry:
    attempts: 2
---
# Headers middleware to rewrite Host header to the request host (without port)
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: fallback-host-rewrite
  namespace: traefik
spec:
  headers:
    customRequestHeaders:
      # Always set upstream Host to the external hostname
      Host: "ha.dominikstahl.dev"
---
# ServersTransport for the fallback upstream: skip TLS verification (for testing/homelab)
apiVersion: traefik.io/v1alpha1
kind: ServersTransport
metadata:
  name: fallback-servers-transport
  namespace: traefik
spec:
  insecureSkipVerify: true
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: fallback-ingressroute
  namespace: traefik
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: PathPrefix(`/`)
      priority: 1
      kind: Rule
      middlewares:
        - name: fallback-host-rewrite
        - name: fallback-retry
      services:
        - name: fallback-upstream
          port: 443
          # ask Traefik to use TLS to upstream
          scheme: https
          # do NOT pass the original Host header; we set a fixed Host above
          passHostHeader: false
          # use the fallback servers transport (skip TLS verification)
          serversTransport: fallback-servers-transport
